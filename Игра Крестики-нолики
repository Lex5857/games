# Игра Крестики-нолики

def print_matrix(table):
    num_line = 0
    print(' ', 0, 1, 2)
    for line in table:
        print(num_line, *line)  # печатаем, распакованыые элементы списка
        num_line += 1
        continue


def win_player():
    win = bool
    if main_diagonal == ['X', 'X', 'X'] or side_diagonal == ['X', 'X', 'X']:
        print(f'Победил {player_1}')
        return win
    elif main_diagonal == ['O', 'O', 'O'] or side_diagonal == ['O', 'O', 'O']:
        print(f'Победил {player_2}')
        return win
    for line in field_cells:
        if line == ['X', 'X', 'X']:
            print(f'Победил {player_1}')
            return win
        elif line == ['O', 'O', 'O']:
            print(f'Победил {player_2}')
            return win
    for column in list_columns:
        if column == ['X', 'X', 'X']:
            print(f'Победил {player_1}')
            return win
        elif column == ['O', 'O', 'O']:
            print(f'Победил {player_2}')
            return win


print('Игра Крестики-нолики')
player_1 = input('Введите имя 1 игрока: ')
print(f'Здравствуй, {player_1} Вы ходите крестиками.')
player_2 = input('Введите имя 2 игрока: ')
print(f'Здравствуй, {player_2} Вы ходите ноликами.')
print('Хотите узнать правила игры? (Y - да, N - нет)')
while True:
    answer = (input('Введите ответ: ')).upper()  # позволяет игроку ввести ответ в нижнем регистре
    if answer == 'Y':
        print('''
        Игроки по очереди ставят на свободные клетки поля 3×3 знаки (один
        всегда крестики, другой всегда нолики). Первый, выстроивший в ряд 3
        своих фигуры по вертикали, горизонтали или диагонали, выигрывает.
        Первый ход делает игрок, ставящий крестики. Обычно по завершении партии
        выигравшая сторона зачёркивает чертой свои три знака'
        (нолика или крестика), составляющих сплошной ряд.
        ''')
        break
    elif answer == 'N':
        print('Правила игры Вам знакомы, тогда начнем игру.')
        break
    else:
        print('Ответ не понятен')

field_cells = [
    [' ', ' ', ' '],
    [' ', ' ', ' '],
    [' ', ' ', ' ']
]
main_diagonal = []
side_diagonal = []
list_columns = [
    [' ', ' ', ' '],
    [' ', ' ', ' '],
    [' ', ' ', ' ']
]

print_matrix(field_cells)

for step in range(1, 10):
    if step % 2 != 0:
        print(f'Ваш ход {player_1}:')
        cells = 'X'
    else:
        print(f'Ваш ход {player_2}')
        cells = 'O'
    while True:
        i = int(input('Ведите номер строки: '))
        j = int(input('Ведите номер столбца: '))
        if 0 <= i <= 2 and 0 <= j <= 2 and field_cells[i][j] == ' ':
            if i == j:
                main_diagonal.append(cells)  # заполняем список главной диоганали
                if i == 1 and j == 1:
                    side_diagonal.append(cells)
            elif (i == 0 and j == 2) or (i == 2 and j == 0):
                side_diagonal.append(cells)  # заполняем список пабочной диоганали
            list_columns[j][i] = cells       # заполняем список столбцов
            field_cells[i][j] = cells        # заполняем игровое поле ходами игроков
            print_matrix(field_cells)
            break
        else:
            if cells == 'X':
                print(f'{player_1} данный ход не возможен. Подумайте ещё.')
            else:
                print(f'{player_2} данный ход не возможен. Подумайте ещё.')
    if win_player():                     # если определен победитель останвливаем цикл
        break
